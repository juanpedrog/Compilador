/* The following code was generated by JFlex 1.6.1 */

package ejemplocup;
import java_cup.runtime.*;
import java.io.Reader;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>alexico.flex</tt>
 */
class scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\105\1\104\1\106\1\106\1\105\22\0\1\105\1\70\6\0"+
    "\1\71\1\72\1\62\1\60\1\77\1\61\1\64\1\63\12\1\1\73"+
    "\1\74\1\67\1\65\1\66\2\0\1\2\1\10\1\3\1\15\1\16"+
    "\1\20\1\7\1\102\1\57\1\12\1\102\1\13\1\5\1\17\1\11"+
    "\1\6\1\102\1\24\1\56\1\4\1\22\1\26\1\102\1\14\1\102"+
    "\1\25\1\75\1\0\1\76\1\0\1\55\1\0\1\30\1\36\1\31"+
    "\1\43\1\44\1\46\1\35\1\27\1\51\1\40\1\27\1\41\1\33"+
    "\1\45\1\37\1\34\1\27\1\52\1\47\1\32\1\50\1\54\1\27"+
    "\1\42\1\27\1\53\1\101\1\100\1\103\7\0\1\106\252\0\2\23"+
    "\115\0\1\21\u1ea8\0\1\106\1\106\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\12\3\1\4\1\3\12\5\1\4"+
    "\1\5\1\4\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\1\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\1\1\25\1\3\1\0\14\3\1\0"+
    "\24\3\1\0\1\26\2\3\21\5\1\26\1\5\1\3"+
    "\1\26\1\3\1\26\1\2\1\27\1\30\1\31\1\32"+
    "\5\0\1\33\2\3\2\34\2\35\2\36\2\37\2\3"+
    "\1\0\2\3\2\40\2\41\2\42\2\43\2\44\2\3"+
    "\1\45\1\46\1\45\2\46\2\3\1\47\2\50\1\5"+
    "\1\34\1\35\1\36\1\37\2\5\1\40\1\41\1\42"+
    "\1\43\1\44\1\5\1\45\1\46\1\5\1\47\1\50"+
    "\2\47\1\0\2\51\2\3\1\0\4\3\2\52\2\53"+
    "\1\51\3\5\1\52\1\53\1\25\1\54\1\55\1\54"+
    "\1\55\1\56\1\57\1\56\1\57\1\56\1\57\2\3"+
    "\1\54\1\55\1\56\1\57\1\5\2\3\1\5\3\60";

  private static int [] zzUnpackAction() {
    int [] result = new int[220];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\216\0\325\0\u011c\0\u0163\0\u01aa\0\u01f1"+
    "\0\u0238\0\u027f\0\u02c6\0\u030d\0\u0354\0\u039b\0\u03e2\0\u0429"+
    "\0\u0470\0\u04b7\0\u04fe\0\u0545\0\u058c\0\u05d3\0\u061a\0\u0661"+
    "\0\u06a8\0\u06ef\0\u0736\0\u077d\0\u07c4\0\u07c4\0\107\0\107"+
    "\0\u080b\0\u0852\0\u0899\0\u08e0\0\107\0\107\0\107\0\107"+
    "\0\107\0\107\0\107\0\107\0\u0927\0\107\0\u096e\0\u09b5"+
    "\0\u09fc\0\u0a43\0\u0a8a\0\u0ad1\0\u0b18\0\u0b5f\0\u0ba6\0\u0bed"+
    "\0\u0c34\0\u0c7b\0\u0cc2\0\u0d09\0\u0d50\0\u0d97\0\u0dde\0\u0e25"+
    "\0\u0e6c\0\u0eb3\0\u0efa\0\u0f41\0\u0f88\0\u0fcf\0\u1016\0\u105d"+
    "\0\u10a4\0\u10eb\0\u1132\0\u1179\0\u11c0\0\u1207\0\u124e\0\u1295"+
    "\0\u12dc\0\u1323\0\107\0\u136a\0\u13b1\0\u13f8\0\u143f\0\u1486"+
    "\0\u14cd\0\u1514\0\u155b\0\u15a2\0\u15e9\0\u1630\0\u1677\0\u16be"+
    "\0\u1705\0\u174c\0\u1793\0\u17da\0\u1821\0\u1868\0\u0429\0\u18af"+
    "\0\u18f6\0\u0163\0\u193d\0\u096e\0\u1984\0\107\0\107\0\107"+
    "\0\107\0\u0927\0\u19cb\0\u1a12\0\u1a59\0\u1aa0\0\u09b5\0\u1ae7"+
    "\0\u1b2e\0\u0163\0\u096e\0\u0163\0\u096e\0\u0163\0\u096e\0\u0163"+
    "\0\u096e\0\u1b75\0\u1bbc\0\u1c03\0\u1c4a\0\u1c91\0\u0163\0\u096e"+
    "\0\u0163\0\u096e\0\u1cd8\0\u1d1f\0\u0163\0\u096e\0\u0163\0\u096e"+
    "\0\u1d66\0\u1dad\0\u0163\0\107\0\u096e\0\u096e\0\u0163\0\u1df4"+
    "\0\u1e3b\0\107\0\u0163\0\u096e\0\u1e82\0\u0429\0\u0429\0\u0429"+
    "\0\u0429\0\u1ec9\0\u1f10\0\u0429\0\u0429\0\u1f57\0\u0429\0\u0429"+
    "\0\u1f9e\0\u0429\0\u0429\0\u1fe5\0\u0429\0\u0429\0\u0163\0\u096e"+
    "\0\u202c\0\u0163\0\u096e\0\u2073\0\u20ba\0\u2101\0\u2148\0\u218f"+
    "\0\u21d6\0\u221d\0\u0163\0\u096e\0\u0163\0\u096e\0\u0429\0\u2264"+
    "\0\u22ab\0\u22f2\0\u0429\0\u0429\0\u0927\0\u0163\0\u0163\0\u096e"+
    "\0\u096e\0\107\0\107\0\u096e\0\u096e\0\u0163\0\u0163\0\u2339"+
    "\0\u2380\0\u0429\0\u0429\0\u0429\0\u0429\0\u23c7\0\u240e\0\u2455"+
    "\0\u249c\0\u0163\0\u096e\0\u0429";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[220];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\6\1\10"+
    "\1\11\2\6\1\12\1\6\1\13\1\14\1\6\1\15"+
    "\1\16\1\6\1\2\2\6\1\17\1\20\1\21\1\22"+
    "\1\20\1\23\1\20\1\24\1\25\2\20\1\26\1\20"+
    "\1\27\1\30\1\20\1\31\1\32\4\20\1\33\1\2"+
    "\1\34\1\6\1\35\1\36\1\37\1\40\1\2\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\6\1\2\2\56\111\0"+
    "\1\3\17\6\1\0\1\6\1\0\3\6\26\57\1\0"+
    "\2\6\4\0\1\60\15\0\1\6\5\0\2\6\1\61"+
    "\2\6\1\62\12\6\1\0\1\6\1\0\3\6\2\57"+
    "\1\63\2\57\1\64\20\57\1\0\2\6\22\0\1\6"+
    "\5\0\10\6\1\65\1\66\1\67\5\6\1\0\1\6"+
    "\1\0\3\6\10\57\1\70\1\71\1\72\13\57\1\0"+
    "\2\6\22\0\1\6\5\0\20\6\1\0\1\6\1\0"+
    "\3\6\26\57\1\0\2\6\22\0\1\6\5\0\10\6"+
    "\1\73\7\6\1\0\1\6\1\0\3\6\10\57\1\74"+
    "\15\57\1\0\2\6\22\0\1\6\5\0\20\6\1\0"+
    "\1\6\1\75\3\6\22\57\1\76\3\57\1\0\1\6"+
    "\1\77\22\0\1\6\5\0\10\6\1\100\7\6\1\0"+
    "\1\6\1\0\3\6\10\57\1\101\15\57\1\0\2\6"+
    "\22\0\1\6\5\0\20\6\1\0\1\102\1\0\3\6"+
    "\21\57\1\103\4\57\1\0\2\6\22\0\1\6\5\0"+
    "\15\6\1\104\2\6\1\0\1\6\1\0\3\6\15\57"+
    "\1\105\10\57\1\0\2\6\22\0\1\6\5\0\2\6"+
    "\1\106\10\6\1\107\2\6\1\110\1\111\1\0\1\6"+
    "\1\0\3\6\2\57\1\112\10\57\1\113\2\57\1\114"+
    "\1\115\6\57\1\0\2\6\22\0\1\6\5\0\12\6"+
    "\1\116\5\6\1\0\1\117\1\0\3\6\12\57\1\120"+
    "\6\57\1\121\4\57\1\0\2\6\22\0\1\6\12\0"+
    "\1\122\10\0\1\123\14\0\1\122\10\0\1\123\42\0"+
    "\14\6\1\124\3\6\1\0\1\6\1\0\3\6\14\57"+
    "\1\125\11\57\1\0\2\6\22\0\1\6\5\0\20\20"+
    "\1\0\1\20\1\0\34\20\22\0\1\20\5\0\2\20"+
    "\1\126\2\20\1\127\12\20\1\0\1\20\1\0\5\20"+
    "\1\126\2\20\1\127\23\20\22\0\1\20\5\0\10\20"+
    "\1\130\1\131\1\132\5\20\1\0\1\20\1\0\13\20"+
    "\1\130\1\131\1\132\16\20\22\0\1\20\5\0\10\20"+
    "\1\133\7\20\1\0\1\20\1\0\13\20\1\133\20\20"+
    "\22\0\1\20\5\0\20\20\1\0\1\20\1\75\25\20"+
    "\1\134\5\20\1\134\22\0\1\20\5\0\10\20\1\135"+
    "\7\20\1\0\1\20\1\0\13\20\1\135\20\20\22\0"+
    "\1\20\5\0\20\20\1\0\1\136\1\0\24\20\1\136"+
    "\7\20\22\0\1\20\5\0\15\20\1\137\2\20\1\0"+
    "\1\20\1\0\20\20\1\137\13\20\22\0\1\20\5\0"+
    "\2\20\1\140\10\20\1\141\2\20\1\142\1\143\1\0"+
    "\1\20\1\0\5\20\1\140\10\20\1\141\2\20\1\142"+
    "\1\143\11\20\22\0\1\20\5\0\12\20\1\144\5\20"+
    "\1\0\1\145\1\0\15\20\1\144\6\20\1\145\7\20"+
    "\22\0\1\20\5\0\5\20\1\146\10\20\1\147\1\20"+
    "\1\0\1\20\1\0\10\20\1\146\10\20\1\147\12\20"+
    "\22\0\1\20\5\0\14\20\1\150\3\20\1\0\1\20"+
    "\1\0\17\20\1\150\14\20\22\0\1\20\5\0\5\6"+
    "\1\151\10\6\1\152\1\6\1\0\1\6\1\0\3\6"+
    "\5\57\1\153\10\57\1\154\7\57\1\0\2\6\22\0"+
    "\1\6\5\0\1\155\172\0\1\156\106\0\1\157\106\0"+
    "\1\160\106\0\1\161\22\0\20\162\1\0\1\162\1\0"+
    "\31\162\1\0\11\162\1\163\1\164\5\162\1\165\2\162"+
    "\1\0\1\162\1\56\1\166\1\162\2\0\20\57\1\0"+
    "\1\57\1\0\34\57\22\0\1\57\5\0\1\167\106\0"+
    "\3\6\1\170\14\6\1\0\1\6\1\0\3\6\3\57"+
    "\1\171\22\57\1\0\2\6\22\0\1\6\5\0\6\6"+
    "\1\172\11\6\1\0\1\6\1\0\3\6\6\57\1\173"+
    "\17\57\1\0\2\6\22\0\1\6\5\0\3\57\1\171"+
    "\14\57\1\0\1\57\1\0\6\57\1\171\25\57\22\0"+
    "\1\57\5\0\6\57\1\173\11\57\1\0\1\57\1\0"+
    "\11\57\1\173\22\57\22\0\1\57\5\0\4\6\1\174"+
    "\13\6\1\0\1\6\1\0\3\6\4\57\1\175\21\57"+
    "\1\0\2\6\22\0\1\6\5\0\3\6\1\176\14\6"+
    "\1\0\1\6\1\0\3\6\3\57\1\177\22\57\1\0"+
    "\2\6\22\0\1\6\5\0\13\6\1\200\4\6\1\0"+
    "\1\6\1\0\3\6\13\57\1\201\12\57\1\0\2\6"+
    "\22\0\1\6\5\0\4\57\1\175\13\57\1\0\1\57"+
    "\1\0\7\57\1\175\24\57\22\0\1\57\5\0\3\57"+
    "\1\177\14\57\1\0\1\57\1\0\6\57\1\177\25\57"+
    "\22\0\1\57\5\0\13\57\1\201\4\57\1\0\1\57"+
    "\1\0\16\57\1\201\15\57\22\0\1\57\5\0\20\6"+
    "\1\0\1\6\1\0\2\6\1\202\25\57\1\203\1\0"+
    "\2\6\22\0\1\6\5\0\20\57\1\0\1\57\1\0"+
    "\2\57\1\203\25\57\1\203\3\57\22\0\1\57\30\0"+
    "\1\204\25\0\1\204\35\0\20\57\1\0\1\57\1\0"+
    "\1\205\25\57\1\205\5\57\22\0\1\57\5\0\20\6"+
    "\1\0\1\6\1\0\1\206\2\6\23\57\1\205\2\57"+
    "\1\0\2\6\22\0\1\6\5\0\10\6\1\207\7\6"+
    "\1\0\1\6\1\0\3\6\10\57\1\210\15\57\1\0"+
    "\2\6\22\0\1\6\5\0\10\57\1\210\7\57\1\0"+
    "\1\57\1\0\13\57\1\210\20\57\22\0\1\57\5\0"+
    "\20\6\1\0\1\6\1\0\1\6\1\211\1\6\24\57"+
    "\1\212\1\57\1\0\2\6\22\0\1\6\5\0\20\57"+
    "\1\0\1\57\1\0\1\57\1\212\25\57\1\212\4\57"+
    "\22\0\1\57\5\0\3\6\1\213\14\6\1\0\1\6"+
    "\1\0\3\6\3\57\1\214\22\57\1\0\2\6\22\0"+
    "\1\6\5\0\3\57\1\214\14\57\1\0\1\57\1\0"+
    "\6\57\1\214\25\57\22\0\1\57\5\0\14\6\1\215"+
    "\3\6\1\0\1\6\1\0\3\6\14\57\1\216\11\57"+
    "\1\0\2\6\22\0\1\6\5\0\2\6\1\217\15\6"+
    "\1\0\1\6\1\0\3\6\2\57\1\220\23\57\1\0"+
    "\2\6\22\0\1\6\5\0\3\6\1\217\14\6\1\0"+
    "\1\6\1\0\3\6\3\57\1\220\22\57\1\0\2\6"+
    "\22\0\1\6\5\0\15\6\1\221\2\6\1\0\1\6"+
    "\1\0\3\6\15\57\1\222\10\57\1\0\2\6\22\0"+
    "\1\6\5\0\14\57\1\216\3\57\1\0\1\57\1\0"+
    "\17\57\1\216\14\57\22\0\1\57\5\0\2\57\1\220"+
    "\15\57\1\0\1\57\1\0\5\57\1\220\26\57\22\0"+
    "\1\57\5\0\3\57\1\220\14\57\1\0\1\57\1\0"+
    "\6\57\1\220\25\57\22\0\1\57\5\0\15\57\1\222"+
    "\2\57\1\0\1\57\1\0\20\57\1\222\13\57\22\0"+
    "\1\57\5\0\10\6\1\223\7\6\1\224\1\6\1\0"+
    "\3\6\10\57\1\225\7\57\1\226\5\57\1\0\1\227"+
    "\1\6\22\0\1\6\5\0\16\6\1\230\1\6\1\0"+
    "\1\6\1\0\3\6\16\57\1\231\7\57\1\0\2\6"+
    "\22\0\1\6\5\0\10\57\1\225\7\57\1\224\1\57"+
    "\1\0\13\57\1\225\7\57\1\226\6\57\1\226\1\57"+
    "\22\0\1\57\5\0\16\57\1\231\1\57\1\0\1\57"+
    "\1\0\21\57\1\231\12\57\22\0\1\57\21\0\1\232"+
    "\25\0\1\232\44\0\14\6\1\233\3\6\1\0\1\6"+
    "\1\0\3\6\14\57\1\234\11\57\1\0\2\6\22\0"+
    "\1\6\5\0\14\57\1\234\3\57\1\0\1\57\1\0"+
    "\17\57\1\234\14\57\22\0\1\57\5\0\3\20\1\235"+
    "\14\20\1\0\1\20\1\0\6\20\1\235\25\20\22\0"+
    "\1\20\5\0\6\20\1\236\11\20\1\0\1\20\1\0"+
    "\11\20\1\236\22\20\22\0\1\20\5\0\4\20\1\237"+
    "\13\20\1\0\1\20\1\0\7\20\1\237\24\20\22\0"+
    "\1\20\5\0\3\20\1\240\14\20\1\0\1\20\1\0"+
    "\6\20\1\240\25\20\22\0\1\20\5\0\13\20\1\241"+
    "\4\20\1\0\1\20\1\0\16\20\1\241\15\20\22\0"+
    "\1\20\5\0\20\20\1\0\1\20\1\0\2\20\1\242"+
    "\25\20\1\242\3\20\22\0\1\20\5\0\20\20\1\0"+
    "\1\20\1\0\1\243\25\20\1\243\5\20\22\0\1\20"+
    "\5\0\10\20\1\244\7\20\1\0\1\20\1\0\13\20"+
    "\1\244\20\20\22\0\1\20\5\0\20\20\1\0\1\20"+
    "\1\0\1\20\1\245\25\20\1\245\4\20\22\0\1\20"+
    "\5\0\3\20\1\246\14\20\1\0\1\20\1\0\6\20"+
    "\1\246\25\20\22\0\1\20\5\0\14\20\1\247\3\20"+
    "\1\0\1\20\1\0\17\20\1\247\14\20\22\0\1\20"+
    "\5\0\2\20\1\250\15\20\1\0\1\20\1\0\5\20"+
    "\1\250\26\20\22\0\1\20\5\0\3\20\1\250\14\20"+
    "\1\0\1\20\1\0\6\20\1\250\25\20\22\0\1\20"+
    "\5\0\15\20\1\251\2\20\1\0\1\20\1\0\20\20"+
    "\1\251\13\20\22\0\1\20\5\0\10\20\1\252\7\20"+
    "\1\224\1\20\1\0\13\20\1\252\7\20\1\253\6\20"+
    "\1\253\1\20\22\0\1\20\5\0\16\20\1\254\1\20"+
    "\1\0\1\20\1\0\21\20\1\254\12\20\22\0\1\20"+
    "\5\0\14\20\1\255\3\20\1\0\1\20\1\0\17\20"+
    "\1\255\14\20\22\0\1\20\5\0\14\20\1\256\3\20"+
    "\1\0\1\20\1\0\17\20\1\256\14\20\22\0\1\20"+
    "\5\0\14\6\1\257\3\6\1\0\1\6\1\0\3\6"+
    "\14\57\1\260\11\57\1\0\2\6\22\0\1\6\5\0"+
    "\14\57\1\260\3\57\1\0\1\57\1\0\17\57\1\260"+
    "\14\57\22\0\1\57\5\0\1\155\62\0\1\60\107\0"+
    "\1\162\15\0\1\162\70\0\1\162\124\0\1\162\4\0"+
    "\20\162\1\0\1\162\1\0\31\162\1\0\11\162\1\261"+
    "\1\164\5\162\1\261\2\162\1\0\1\162\1\56\1\166"+
    "\1\162\2\0\4\6\1\262\13\6\1\0\1\6\1\0"+
    "\3\6\4\57\1\263\21\57\1\0\2\6\22\0\1\6"+
    "\5\0\4\57\1\263\13\57\1\0\1\57\1\0\7\57"+
    "\1\263\24\57\22\0\1\57\5\0\1\6\1\264\16\6"+
    "\1\0\1\6\1\0\3\6\1\57\1\265\24\57\1\0"+
    "\2\6\22\0\1\6\5\0\1\57\1\265\16\57\1\0"+
    "\1\57\1\0\4\57\1\265\27\57\22\0\1\57\6\0"+
    "\1\266\25\0\1\266\57\0\1\57\1\267\16\57\1\0"+
    "\1\57\1\0\4\57\1\267\27\57\22\0\1\57\5\0"+
    "\1\6\1\270\16\6\1\0\1\6\1\0\3\6\1\57"+
    "\1\267\24\57\1\0\2\6\22\0\1\6\5\0\15\6"+
    "\1\271\2\6\1\0\1\6\1\0\3\6\15\57\1\272"+
    "\10\57\1\0\2\6\22\0\1\6\5\0\15\57\1\272"+
    "\2\57\1\0\1\57\1\0\20\57\1\272\13\57\22\0"+
    "\1\57\5\0\2\6\1\273\15\6\1\0\1\6\1\0"+
    "\3\6\2\57\1\274\23\57\1\0\2\6\22\0\1\6"+
    "\5\0\2\57\1\274\15\57\1\0\1\57\1\0\5\57"+
    "\1\274\26\57\22\0\1\57\5\0\2\6\1\275\15\6"+
    "\1\0\1\6\1\0\3\6\2\57\1\276\23\57\1\0"+
    "\2\6\22\0\1\6\5\0\2\57\1\276\15\57\1\0"+
    "\1\57\1\0\5\57\1\276\26\57\22\0\1\57\5\0"+
    "\4\20\1\277\13\20\1\0\1\20\1\0\7\20\1\277"+
    "\24\20\22\0\1\20\5\0\1\20\1\300\16\20\1\0"+
    "\1\20\1\0\4\20\1\300\27\20\22\0\1\20\5\0"+
    "\1\20\1\301\16\20\1\0\1\20\1\0\4\20\1\301"+
    "\27\20\22\0\1\20\5\0\15\20\1\302\2\20\1\0"+
    "\1\20\1\0\20\20\1\302\13\20\22\0\1\20\5\0"+
    "\2\20\1\303\15\20\1\0\1\20\1\0\5\20\1\303"+
    "\26\20\22\0\1\20\5\0\2\20\1\304\15\20\1\0"+
    "\1\20\1\0\5\20\1\304\26\20\22\0\1\20\5\0"+
    "\20\162\1\0\1\162\1\0\31\162\1\0\11\162\1\163"+
    "\1\164\5\162\1\165\2\162\1\0\1\162\1\305\1\166"+
    "\1\162\2\0\3\6\1\306\10\6\1\307\3\6\1\0"+
    "\1\6\1\0\3\6\3\57\1\310\10\57\1\311\11\57"+
    "\1\0\2\6\22\0\1\6\5\0\3\57\1\310\10\57"+
    "\1\311\3\57\1\0\1\57\1\0\6\57\1\310\10\57"+
    "\1\311\14\57\22\0\1\57\21\0\1\312\5\0\1\313"+
    "\17\0\1\312\5\0\1\313\5\0\1\313\30\0\14\57"+
    "\1\314\3\57\1\0\1\57\1\313\17\57\1\314\5\57"+
    "\1\315\5\57\1\315\22\0\1\57\5\0\14\6\1\316"+
    "\3\6\1\0\1\6\1\313\3\6\14\57\1\314\5\57"+
    "\1\315\3\57\1\0\1\6\1\317\22\0\1\6\5\0"+
    "\16\6\1\320\1\6\1\0\1\6\1\0\3\6\16\57"+
    "\1\321\7\57\1\0\2\6\22\0\1\6\5\0\16\57"+
    "\1\321\1\57\1\0\1\57\1\0\21\57\1\321\12\57"+
    "\22\0\1\57\5\0\3\20\1\322\10\20\1\323\3\20"+
    "\1\0\1\20\1\0\6\20\1\322\10\20\1\323\14\20"+
    "\22\0\1\20\5\0\14\20\1\324\3\20\1\0\1\20"+
    "\1\313\17\20\1\324\5\20\1\325\5\20\1\325\22\0"+
    "\1\20\5\0\16\20\1\326\1\20\1\0\1\20\1\0"+
    "\21\20\1\326\12\20\22\0\1\20\5\0\3\6\1\327"+
    "\14\6\1\0\1\6\1\0\3\6\3\57\1\330\22\57"+
    "\1\0\2\6\22\0\1\6\5\0\3\57\1\330\14\57"+
    "\1\0\1\57\1\0\6\57\1\330\25\57\22\0\1\57"+
    "\5\0\3\20\1\331\14\20\1\0\1\20\1\0\6\20"+
    "\1\331\25\20\22\0\1\20\5\0\15\6\1\332\2\6"+
    "\1\0\1\6\1\0\3\6\15\57\1\333\10\57\1\0"+
    "\2\6\22\0\1\6\5\0\15\57\1\333\2\57\1\0"+
    "\1\57\1\0\20\57\1\333\13\57\22\0\1\57\5\0"+
    "\15\20\1\334\2\20\1\0\1\20\1\0\20\20\1\334"+
    "\13\20\22\0\1\20\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9443];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\34\1\2\11\4\1\10\11\1\1\1\11"+
    "\1\1\1\0\14\1\1\0\24\1\1\0\1\11\32\1"+
    "\4\11\5\0\15\1\1\0\17\1\1\11\5\1\1\11"+
    "\26\1\1\0\4\1\1\0\23\1\2\11\21\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[220];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public String lexeme;
public int linea;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 224) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.SIMBOLO_DESCONOCIDO);
            }
          case 49: break;
          case 2: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.NUM_ENTERO);
            }
          case 50: break;
          case 3: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.CADENA_DESCONOCIDA);
            }
          case 51: break;
          case 4: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.PALABRA_RESERVADA_S);
            }
          case 52: break;
          case 5: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.IDENTIFICADOR);
            }
          case 53: break;
          case 6: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.OP_ARITMETICO_ADD);
            }
          case 54: break;
          case 7: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.OP_ARITMETICO_SUB);
            }
          case 55: break;
          case 8: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.OP_ARITMETICO_MUL);
            }
          case 56: break;
          case 9: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.OP_ARITMETICO_DIV);
            }
          case 57: break;
          case 10: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.SIMBOLO_ASIGNACION);
            }
          case 58: break;
          case 11: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.OP_RELACIONAL_MAQUE);
            }
          case 59: break;
          case 12: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.OP_RELACIONAL_MEQUE);
            }
          case 60: break;
          case 13: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.SIMBOLO_AGRUPACION_PABRE);
            }
          case 61: break;
          case 14: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.SIMBOLO_AGRUPACION_PACIERRA);
            }
          case 62: break;
          case 15: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.SIMBOLO_AGRUPACION_DOSP);
            }
          case 63: break;
          case 16: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.SIMBOLO_AGRUPACION_PCOMA);
            }
          case 64: break;
          case 17: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.SIMBOLO_AGRUPACION_CABRE);
            }
          case 65: break;
          case 18: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.SIMBOLO_AGRUPACION_CCIERRA);
            }
          case 66: break;
          case 19: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.COMA);
            }
          case 67: break;
          case 20: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.FIN_LINEA);
            }
          case 68: break;
          case 21: 
            { /*Ignore*/
            }
          case 69: break;
          case 22: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.PALABRA_RESERVADA_SN);
            }
          case 70: break;
          case 23: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.OP_RELACIONAL_IIGUAL);
            }
          case 71: break;
          case 24: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.OP_RELACIONAL_MAIGUAL);
            }
          case 72: break;
          case 25: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.OP_RELACIONAL_MEIGUAL);
            }
          case 73: break;
          case 26: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.OP_RELACIONAL_DIFERENTE);
            }
          case 74: break;
          case 27: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.NUM_FLOTANTE);
            }
          case 75: break;
          case 28: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.PALABRA_RESERVADA_APG);
            }
          case 76: break;
          case 29: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.PALABRA_RESERVADA_COM);
            }
          case 77: break;
          case 30: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.PALABRA_RESERVADA_CJT);
            }
          case 78: break;
          case 31: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.PALABRA_RESERVADA_CLX);
            }
          case 79: break;
          case 32: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.PALABRA_RESERVADA__BOO);
            }
          case 80: break;
          case 33: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.PALABRA_RESERVADA_LUZ);
            }
          case 81: break;
          case 34: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.PALABRA_RESERVADA_DET);
            }
          case 82: break;
          case 35: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.PALABRA_RESERVADA_ECD);
            }
          case 83: break;
          case 36: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.PALABRA_RESERVADA_ENT);
            }
          case 84: break;
          case 37: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.PALABRA_RESERVADA_FLO);
            }
          case 85: break;
          case 38: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.PALABRA_RESERVADA_FLS);
            }
          case 86: break;
          case 39: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.PALABRA_RESERVADA_SPD);
            }
          case 87: break;
          case 40: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.PALABRA_RESERVADA_VDD);
            }
          case 88: break;
          case 41: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.PALABRA_RESERVADA_ACTM);
            }
          case 89: break;
          case 42: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.PALABRA_RESERVADA_EFEC);
            }
          case 90: break;
          case 43: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.PALABRA_RESERVADA_FUNC);
            }
          case 91: break;
          case 44: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.PALABRA_RESERVADA_MOVAT);
            }
          case 92: break;
          case 45: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.PALABRA_RESERVADA_MOVAD);
            }
          case 93: break;
          case 46: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.PALABRA_RESERVADA_GIRAD);
            }
          case 94: break;
          case 47: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.PALABRA_RESERVADA_GIRAI);
            }
          case 95: break;
          case 48: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.PALABRA_RESERVADA_DETENTE);
            }
          case 96: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
