/* The following code was generated by JFlex 1.6.1 */

package ejemplocup;
import java_cup.runtime.*;
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>alexico.flex</tt>
 */
class AnalizadorLexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\27\1\27\1\105\1\105\1\27\22\0\1\27\1\14\6\0"+
    "\1\15\1\16\1\7\1\5\1\23\1\6\1\4\1\10\12\1\1\17"+
    "\1\20\1\12\1\11\1\13\2\0\1\32\1\46\1\34\1\60\1\62"+
    "\1\66\1\44\1\26\1\76\1\52\1\26\1\54\1\40\1\64\1\50"+
    "\1\42\1\26\1\100\1\71\1\36\1\73\1\104\1\26\1\56\1\26"+
    "\1\102\1\21\1\0\1\22\1\0\1\3\1\0\1\31\1\45\1\33"+
    "\1\57\1\61\1\65\1\43\1\2\1\75\1\51\1\2\1\53\1\37"+
    "\1\63\1\47\1\41\1\2\1\77\1\70\1\35\1\72\1\103\1\2"+
    "\1\55\1\2\1\101\1\25\1\24\1\30\7\0\1\105\252\0\2\74"+
    "\115\0\1\67\u1ea8\0\1\105\1\105\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\1\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\1\1\23\1\24\1\3"+
    "\1\23\1\3\1\23\1\3\1\23\1\3\1\23\1\3"+
    "\1\23\1\3\1\23\1\3\1\23\1\3\1\23\1\3"+
    "\1\23\3\25\1\3\2\23\1\0\1\2\1\26\1\27"+
    "\1\30\1\31\2\0\2\3\4\23\3\3\6\23\1\3"+
    "\2\23\1\0\1\3\2\23\1\3\2\23\1\3\2\23"+
    "\1\3\2\23\4\3\10\23\2\3\4\23\1\0\1\32"+
    "\1\3\1\32\2\23\2\32\1\3\2\23\1\33\1\3"+
    "\1\34\2\23\2\34\1\35\1\36\1\37\2\35\2\36"+
    "\2\37\1\3\2\23\1\0\1\3\2\23\3\40\3\41"+
    "\3\42\1\43\1\44\1\3\2\43\2\44\2\23\1\45"+
    "\2\46\1\3\1\45\1\46\1\45\1\46\2\23\4\47"+
    "\3\50\3\51\1\3\2\23\1\0\1\3\2\23\1\3"+
    "\2\23\3\52\3\53\1\54\1\55\1\54\1\55\1\54"+
    "\1\55\1\56\1\57\1\56\1\57\1\56\1\57\1\56"+
    "\1\57\1\3\2\23\1\3\2\23\3\60";

  private static int [] zzUnpackAction() {
    int [] result = new int[215];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\322\0\u0118\0\u0118\0\106\0\106"+
    "\0\u015e\0\u01a4\0\u01ea\0\u0230\0\106\0\106\0\106\0\106"+
    "\0\106\0\106\0\106\0\106\0\u0276\0\u02bc\0\106\0\u0302"+
    "\0\u0348\0\u038e\0\u03d4\0\u041a\0\u0460\0\u04a6\0\u04ec\0\u0532"+
    "\0\u0578\0\u05be\0\u0604\0\u064a\0\u0690\0\u06d6\0\u071c\0\u0762"+
    "\0\u07a8\0\u07ee\0\u0834\0\u087a\0\u08c0\0\u0906\0\u094c\0\u0992"+
    "\0\u09d8\0\106\0\106\0\106\0\106\0\u0276\0\u0a1e\0\u0a64"+
    "\0\u0aaa\0\u0af0\0\u0b36\0\u0b7c\0\u0bc2\0\u0c08\0\u0c4e\0\u0c94"+
    "\0\u0cda\0\u0d20\0\u0d66\0\u0dac\0\u0df2\0\u0e38\0\u0e7e\0\u0ec4"+
    "\0\u0f0a\0\u0f50\0\u0f96\0\u0fdc\0\u1022\0\u1068\0\u10ae\0\u10f4"+
    "\0\u113a\0\u1180\0\u11c6\0\u120c\0\u1252\0\u1298\0\u12de\0\u1324"+
    "\0\u136a\0\u13b0\0\u13f6\0\u143c\0\u1482\0\u14c8\0\u150e\0\u1554"+
    "\0\u159a\0\u15e0\0\u1626\0\u166c\0\u16b2\0\u16f8\0\u173e\0\u1784"+
    "\0\u17ca\0\106\0\u1810\0\322\0\u1856\0\u189c\0\u094c\0\u02bc"+
    "\0\u18e2\0\u1928\0\u196e\0\u0992\0\u19b4\0\322\0\u19fa\0\u1a40"+
    "\0\u094c\0\u02bc\0\322\0\322\0\322\0\u094c\0\u02bc\0\u094c"+
    "\0\u02bc\0\u094c\0\u02bc\0\u1a86\0\u1acc\0\u1b12\0\u1b58\0\u1b9e"+
    "\0\u1be4\0\u1c2a\0\322\0\u094c\0\u02bc\0\322\0\u094c\0\u02bc"+
    "\0\u1c70\0\u1cb6\0\u1cfc\0\322\0\322\0\u1d42\0\u094c\0\u02bc"+
    "\0\u094c\0\u02bc\0\u1d88\0\u1dce\0\322\0\106\0\322\0\u1e14"+
    "\0\u094c\0\u094c\0\u02bc\0\u02bc\0\u1e5a\0\u1ea0\0\106\0\322"+
    "\0\u094c\0\u02bc\0\322\0\u094c\0\u02bc\0\322\0\u094c\0\u02bc"+
    "\0\u1ee6\0\u1f2c\0\u1f72\0\u1fb8\0\u1ffe\0\u2044\0\u208a\0\u20d0"+
    "\0\u2116\0\u215c\0\322\0\u094c\0\u02bc\0\322\0\u094c\0\u02bc"+
    "\0\322\0\322\0\u094c\0\u094c\0\u02bc\0\u02bc\0\106\0\106"+
    "\0\322\0\322\0\u094c\0\u094c\0\u02bc\0\u02bc\0\u21a2\0\u21e8"+
    "\0\u222e\0\u2274\0\u22ba\0\u2300\0\322\0\u094c\0\u02bc";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[215];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\2\2\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\2"+
    "\1\30\1\31\1\32\1\33\1\4\1\26\1\34\1\35"+
    "\1\4\1\26\1\36\1\37\1\40\1\41\1\4\1\26"+
    "\1\4\1\26\1\42\1\43\1\4\1\26\1\44\1\45"+
    "\1\46\1\47\1\4\1\26\1\50\1\51\1\52\1\53"+
    "\1\54\1\4\1\26\1\2\1\4\1\26\1\4\1\26"+
    "\1\4\1\26\1\55\1\56\110\0\1\3\1\57\1\0"+
    "\1\60\21\0\1\26\2\0\1\57\1\26\1\57\1\26"+
    "\1\57\1\26\1\57\1\26\1\57\1\26\1\57\1\26"+
    "\1\57\1\26\1\57\1\26\1\57\1\26\1\57\1\26"+
    "\1\57\1\26\1\57\1\26\1\57\1\26\1\57\1\26"+
    "\1\57\1\26\1\0\1\57\1\26\1\57\1\26\1\0"+
    "\1\57\1\26\1\57\1\26\1\57\1\26\1\57\1\26"+
    "\2\0\3\4\22\0\1\4\2\0\36\4\1\0\4\4"+
    "\1\0\10\4\2\0\1\61\115\0\1\62\105\0\1\63"+
    "\105\0\1\64\105\0\1\65\75\0\2\66\1\0\10\66"+
    "\1\67\10\66\1\0\2\66\1\27\36\66\1\0\4\66"+
    "\1\0\10\66\2\0\1\26\1\57\23\0\1\26\2\0"+
    "\1\57\1\26\1\57\1\26\1\57\1\26\1\57\1\26"+
    "\1\57\1\26\1\57\1\26\1\57\1\26\1\57\1\26"+
    "\1\57\1\26\1\57\1\26\1\57\1\26\1\57\1\26"+
    "\1\57\1\26\1\57\1\26\1\57\1\26\1\0\1\57"+
    "\1\26\1\57\1\26\1\0\1\57\1\26\1\57\1\26"+
    "\1\57\1\26\1\57\1\26\2\0\3\4\22\0\1\4"+
    "\2\0\2\4\2\70\4\4\2\71\24\4\1\0\4\4"+
    "\1\0\10\4\2\0\1\26\1\57\23\0\1\26\2\0"+
    "\1\57\1\26\1\72\1\73\1\57\1\26\1\57\1\26"+
    "\1\74\1\75\1\57\1\26\1\57\1\26\1\57\1\26"+
    "\1\57\1\26\1\57\1\26\1\57\1\26\1\57\1\26"+
    "\1\57\1\26\1\57\1\26\1\57\1\26\1\0\1\57"+
    "\1\26\1\57\1\26\1\0\1\57\1\26\1\57\1\26"+
    "\1\57\1\26\1\57\1\26\2\0\3\4\22\0\1\4"+
    "\2\0\16\4\2\76\2\77\2\100\12\4\1\0\4\4"+
    "\1\0\10\4\2\0\1\26\1\57\23\0\1\26\2\0"+
    "\1\57\1\26\1\57\1\26\1\57\1\26\1\57\1\26"+
    "\1\57\1\26\1\57\1\26\1\57\1\26\1\101\1\102"+
    "\1\103\1\104\1\105\1\106\1\57\1\26\1\57\1\26"+
    "\1\57\1\26\1\57\1\26\1\57\1\26\1\0\1\57"+
    "\1\26\1\57\1\26\1\0\1\57\1\26\1\57\1\26"+
    "\1\57\1\26\1\57\1\26\2\0\3\4\22\0\1\4"+
    "\2\0\16\4\2\107\16\4\1\0\4\4\1\0\10\4"+
    "\2\0\1\26\1\57\23\0\1\26\2\0\1\57\1\26"+
    "\1\57\1\26\1\57\1\26\1\57\1\26\1\57\1\26"+
    "\1\57\1\26\1\57\1\26\1\110\1\111\1\57\1\26"+
    "\1\57\1\26\1\57\1\26\1\57\1\26\1\57\1\26"+
    "\1\57\1\26\1\57\1\26\1\0\1\57\1\26\1\57"+
    "\1\26\1\0\1\57\1\26\1\57\1\26\1\57\1\26"+
    "\1\57\1\26\2\0\3\4\22\0\1\4\2\0\36\4"+
    "\1\0\4\4\1\112\2\113\6\4\2\0\1\26\1\57"+
    "\23\0\1\26\2\0\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\0\1\57\1\26\1\57\1\26\1\112\1\114"+
    "\1\115\1\57\1\26\1\57\1\26\1\57\1\26\2\0"+
    "\3\4\22\0\1\4\2\0\16\4\2\116\16\4\1\0"+
    "\4\4\1\0\10\4\2\0\1\26\1\57\23\0\1\26"+
    "\2\0\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\117"+
    "\1\120\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\0"+
    "\1\57\1\26\1\57\1\26\1\0\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\2\0\3\4\22\0"+
    "\1\4\2\0\36\4\1\0\2\4\2\121\1\0\10\4"+
    "\2\0\1\26\1\57\23\0\1\26\2\0\1\57\1\26"+
    "\1\57\1\26\1\57\1\26\1\57\1\26\1\57\1\26"+
    "\1\57\1\26\1\57\1\26\1\57\1\26\1\57\1\26"+
    "\1\57\1\26\1\57\1\26\1\57\1\26\1\57\1\26"+
    "\1\57\1\26\1\57\1\26\1\0\1\57\1\26\1\122"+
    "\1\123\1\0\1\57\1\26\1\57\1\26\1\57\1\26"+
    "\1\57\1\26\2\0\3\4\22\0\1\4\2\0\30\4"+
    "\2\124\4\4\1\0\4\4\1\0\10\4\2\0\1\26"+
    "\1\57\23\0\1\26\2\0\1\57\1\26\1\57\1\26"+
    "\1\57\1\26\1\57\1\26\1\57\1\26\1\57\1\26"+
    "\1\57\1\26\1\57\1\26\1\57\1\26\1\57\1\26"+
    "\1\57\1\26\1\57\1\26\1\125\1\126\1\57\1\26"+
    "\1\57\1\26\1\0\1\57\1\26\1\57\1\26\1\0"+
    "\1\57\1\26\1\57\1\26\1\57\1\26\1\57\1\26"+
    "\2\0\3\4\22\0\1\4\2\0\2\4\2\127\20\4"+
    "\2\130\4\4\2\131\2\132\1\0\4\4\1\0\10\4"+
    "\2\0\1\26\1\57\23\0\1\26\2\0\1\57\1\26"+
    "\1\133\1\134\1\57\1\26\1\57\1\26\1\57\1\26"+
    "\1\57\1\26\1\57\1\26\1\57\1\26\1\57\1\26"+
    "\1\57\1\26\1\135\1\136\1\57\1\26\1\57\1\26"+
    "\1\137\1\140\1\141\1\142\1\0\1\57\1\26\1\57"+
    "\1\26\1\0\1\57\1\26\1\57\1\26\1\57\1\26"+
    "\1\57\1\26\2\0\3\4\22\0\1\4\2\0\22\4"+
    "\2\143\12\4\1\0\2\4\2\144\1\0\10\4\2\0"+
    "\1\26\1\57\23\0\1\26\2\0\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\145"+
    "\1\146\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\0\1\57\1\26\1\147\1\150"+
    "\1\0\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\42\0\2\151\20\0\2\152\22\0\3\4\22\0"+
    "\1\4\2\0\10\4\2\153\20\4\2\154\2\4\1\0"+
    "\4\4\1\0\10\4\2\0\1\26\1\57\23\0\1\26"+
    "\2\0\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\155\1\156\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\157\1\160\1\57\1\26\1\0"+
    "\1\57\1\26\1\57\1\26\1\0\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\2\0\3\4\22\0"+
    "\1\4\2\0\26\4\2\161\6\4\1\0\4\4\1\0"+
    "\10\4\2\0\1\26\1\57\23\0\1\26\2\0\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\162\1\163\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\0\1\57\1\26"+
    "\1\57\1\26\1\0\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\2\0\3\57\22\0\1\57\2\0"+
    "\36\57\1\0\4\57\1\0\10\57\2\0\1\164\105\0"+
    "\1\61\2\0\1\60\112\0\1\66\75\0\3\4\22\0"+
    "\1\4\2\0\4\4\2\165\30\4\1\0\4\4\1\0"+
    "\10\4\2\0\3\4\22\0\1\4\2\0\12\4\2\166"+
    "\22\4\1\0\4\4\1\0\10\4\2\0\3\57\22\0"+
    "\1\57\2\0\4\57\2\167\30\57\1\0\4\57\1\0"+
    "\10\57\2\0\1\26\1\57\23\0\1\26\2\0\1\57"+
    "\1\26\1\57\1\26\1\167\1\170\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\0\1\57\1\26"+
    "\1\57\1\26\1\0\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\2\0\3\57\22\0\1\57\2\0"+
    "\12\57\2\171\22\57\1\0\4\57\1\0\10\57\2\0"+
    "\1\26\1\57\23\0\1\26\2\0\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\171"+
    "\1\172\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\0\1\57\1\26\1\57\1\26"+
    "\1\0\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\2\0\3\4\22\0\1\4\2\0\6\4\2\173"+
    "\26\4\1\0\4\4\1\0\10\4\2\0\3\4\22\0"+
    "\1\4\2\0\4\4\2\174\30\4\1\0\4\4\1\0"+
    "\10\4\2\0\3\4\22\0\1\4\2\0\24\4\2\175"+
    "\10\4\1\0\4\4\1\0\10\4\2\0\3\57\22\0"+
    "\1\57\2\0\6\57\2\176\26\57\1\0\4\57\1\0"+
    "\10\57\2\0\1\26\1\57\23\0\1\26\2\0\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\176\1\177\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\0\1\57\1\26"+
    "\1\57\1\26\1\0\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\2\0\3\57\22\0\1\57\2\0"+
    "\4\57\2\200\30\57\1\0\4\57\1\0\10\57\2\0"+
    "\1\26\1\57\23\0\1\26\2\0\1\57\1\26\1\57"+
    "\1\26\1\200\1\201\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\0\1\57\1\26\1\57\1\26"+
    "\1\0\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\2\0\3\57\22\0\1\57\2\0\24\57\2\202"+
    "\10\57\1\0\4\57\1\0\10\57\2\0\1\26\1\57"+
    "\23\0\1\26\2\0\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\202"+
    "\1\203\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\0\1\57\1\26\1\57\1\26\1\0\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\2\0"+
    "\3\4\22\0\1\4\2\0\36\4\1\0\4\4\1\0"+
    "\6\4\2\204\2\0\3\57\22\0\1\57\2\0\36\57"+
    "\1\0\4\57\1\0\6\57\2\205\2\0\1\26\1\57"+
    "\23\0\1\26\2\0\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\0\1\57\1\26\1\57\1\26\1\0\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\205\1\206\100\0"+
    "\2\207\6\0\3\4\22\0\1\4\2\0\36\4\1\0"+
    "\4\4\1\0\2\4\2\210\4\4\2\0\3\57\22\0"+
    "\1\57\2\0\36\57\1\0\4\57\1\0\2\57\2\211"+
    "\4\57\2\0\1\26\1\57\23\0\1\26\2\0\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\0\1\57\1\26"+
    "\1\57\1\26\1\0\1\57\1\26\1\211\1\212\1\57"+
    "\1\26\1\57\1\26\2\0\3\4\22\0\1\4\2\0"+
    "\16\4\2\213\16\4\1\0\4\4\1\0\10\4\2\0"+
    "\3\57\22\0\1\57\2\0\16\57\2\214\16\57\1\0"+
    "\4\57\1\0\10\57\2\0\1\26\1\57\23\0\1\26"+
    "\2\0\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\214"+
    "\1\215\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\0"+
    "\1\57\1\26\1\57\1\26\1\0\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\2\0\3\4\22\0"+
    "\1\4\2\0\36\4\1\0\4\4\1\0\4\4\2\216"+
    "\2\4\2\0\3\57\22\0\1\57\2\0\36\57\1\0"+
    "\4\57\1\0\4\57\2\217\2\57\2\0\1\26\1\57"+
    "\23\0\1\26\2\0\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\0\1\57\1\26\1\57\1\26\1\0\1\57"+
    "\1\26\1\57\1\26\1\217\1\220\1\57\1\26\2\0"+
    "\3\4\22\0\1\4\2\0\4\4\2\221\30\4\1\0"+
    "\4\4\1\0\10\4\2\0\3\57\22\0\1\57\2\0"+
    "\4\57\2\222\30\57\1\0\4\57\1\0\10\57\2\0"+
    "\1\26\1\57\23\0\1\26\2\0\1\57\1\26\1\57"+
    "\1\26\1\222\1\223\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\0\1\57\1\26\1\57\1\26"+
    "\1\0\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\2\0\3\4\22\0\1\4\2\0\26\4\2\224"+
    "\6\4\1\0\4\4\1\0\10\4\2\0\3\4\22\0"+
    "\1\4\2\0\2\4\2\225\32\4\1\0\4\4\1\0"+
    "\10\4\2\0\3\4\22\0\1\4\2\0\4\4\2\225"+
    "\30\4\1\0\4\4\1\0\10\4\2\0\3\4\22\0"+
    "\1\4\2\0\30\4\2\226\4\4\1\0\4\4\1\0"+
    "\10\4\2\0\3\57\22\0\1\57\2\0\26\57\2\227"+
    "\6\57\1\0\4\57\1\0\10\57\2\0\1\26\1\57"+
    "\23\0\1\26\2\0\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\227\1\230\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\0\1\57\1\26\1\57\1\26\1\0\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\2\0"+
    "\3\57\22\0\1\57\2\0\2\57\2\231\32\57\1\0"+
    "\4\57\1\0\10\57\2\0\1\26\1\57\23\0\1\26"+
    "\2\0\1\57\1\26\1\231\1\232\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\0"+
    "\1\57\1\26\1\57\1\26\1\0\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\2\0\3\57\22\0"+
    "\1\57\2\0\4\57\2\231\30\57\1\0\4\57\1\0"+
    "\10\57\2\0\1\26\1\57\23\0\1\26\2\0\1\57"+
    "\1\26\1\57\1\26\1\231\1\232\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\0\1\57\1\26"+
    "\1\57\1\26\1\0\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\2\0\3\57\22\0\1\57\2\0"+
    "\30\57\2\233\4\57\1\0\4\57\1\0\10\57\2\0"+
    "\1\26\1\57\23\0\1\26\2\0\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\233\1\234\1\57"+
    "\1\26\1\57\1\26\1\0\1\57\1\26\1\57\1\26"+
    "\1\0\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\2\0\3\4\22\0\1\4\2\0\16\4\2\235"+
    "\16\4\1\236\2\237\2\4\1\0\10\4\2\0\3\4"+
    "\22\0\1\4\2\0\32\4\2\240\2\4\1\0\4\4"+
    "\1\0\10\4\2\0\3\57\22\0\1\57\2\0\16\57"+
    "\2\241\16\57\1\236\2\242\2\57\1\0\10\57\2\0"+
    "\1\26\1\57\23\0\1\26\2\0\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\241\1\243\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\236\1\242\1\244\1\57\1\26"+
    "\1\0\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\2\0\3\57\22\0\1\57\2\0\32\57\2\245"+
    "\2\57\1\0\4\57\1\0\10\57\2\0\1\26\1\57"+
    "\23\0\1\26\2\0\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\245\1\246\1\57"+
    "\1\26\1\0\1\57\1\26\1\57\1\26\1\0\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\60\0"+
    "\2\247\26\0\3\4\22\0\1\4\2\0\26\4\2\250"+
    "\6\4\1\0\4\4\1\0\10\4\2\0\3\57\22\0"+
    "\1\57\2\0\26\57\2\251\6\57\1\0\4\57\1\0"+
    "\10\57\2\0\1\26\1\57\23\0\1\26\2\0\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\251\1\252\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\0\1\57\1\26"+
    "\1\57\1\26\1\0\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\2\0\3\4\22\0\1\4\2\0"+
    "\26\4\2\253\6\4\1\0\4\4\1\0\10\4\2\0"+
    "\3\57\22\0\1\57\2\0\26\57\2\254\6\57\1\0"+
    "\4\57\1\0\10\57\2\0\1\26\1\57\23\0\1\26"+
    "\2\0\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\254"+
    "\1\255\1\57\1\26\1\57\1\26\1\57\1\26\1\0"+
    "\1\57\1\26\1\57\1\26\1\0\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\2\0\3\4\22\0"+
    "\1\4\2\0\6\4\2\256\26\4\1\0\4\4\1\0"+
    "\10\4\2\0\3\57\22\0\1\57\2\0\6\57\2\257"+
    "\26\57\1\0\4\57\1\0\10\57\2\0\1\26\1\57"+
    "\23\0\1\26\2\0\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\257\1\260\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\0\1\57\1\26\1\57\1\26\1\0\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\2\0"+
    "\3\4\22\0\1\4\2\0\2\261\34\4\1\0\4\4"+
    "\1\0\10\4\2\0\3\57\22\0\1\57\2\0\2\262"+
    "\34\57\1\0\4\57\1\0\10\57\2\0\1\26\1\57"+
    "\23\0\1\26\2\0\1\262\1\263\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\0\1\57\1\26\1\57\1\26\1\0\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\32\0"+
    "\2\264\54\0\3\4\22\0\1\4\2\0\2\265\34\4"+
    "\1\0\4\4\1\0\10\4\2\0\3\57\22\0\1\57"+
    "\2\0\2\266\34\57\1\0\4\57\1\0\10\57\2\0"+
    "\1\26\1\57\23\0\1\26\2\0\1\266\1\267\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\0\1\57\1\26\1\57\1\26"+
    "\1\0\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\2\0\3\4\22\0\1\4\2\0\30\4\2\270"+
    "\4\4\1\0\4\4\1\0\10\4\2\0\3\57\22\0"+
    "\1\57\2\0\30\57\2\271\4\57\1\0\4\57\1\0"+
    "\10\57\2\0\1\26\1\57\23\0\1\26\2\0\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\271"+
    "\1\272\1\57\1\26\1\57\1\26\1\0\1\57\1\26"+
    "\1\57\1\26\1\0\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\2\0\3\4\22\0\1\4\2\0"+
    "\2\4\2\273\32\4\1\0\4\4\1\0\10\4\2\0"+
    "\3\57\22\0\1\57\2\0\2\57\2\274\32\57\1\0"+
    "\4\57\1\0\10\57\2\0\1\26\1\57\23\0\1\26"+
    "\2\0\1\57\1\26\1\274\1\275\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\0"+
    "\1\57\1\26\1\57\1\26\1\0\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\2\0\3\4\22\0"+
    "\1\4\2\0\2\4\2\276\32\4\1\0\4\4\1\0"+
    "\10\4\2\0\3\57\22\0\1\57\2\0\2\57\2\277"+
    "\32\57\1\0\4\57\1\0\10\57\2\0\1\26\1\57"+
    "\23\0\1\26\2\0\1\57\1\26\1\277\1\300\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\0\1\57\1\26\1\57\1\26\1\0\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\2\0"+
    "\3\4\22\0\1\4\2\0\4\4\2\301\20\4\2\302"+
    "\6\4\1\0\4\4\1\0\10\4\2\0\3\57\22\0"+
    "\1\57\2\0\4\57\2\303\20\57\2\304\6\57\1\0"+
    "\4\57\1\0\10\57\2\0\1\26\1\57\23\0\1\26"+
    "\2\0\1\57\1\26\1\57\1\26\1\303\1\305\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\304"+
    "\1\306\1\57\1\26\1\57\1\26\1\57\1\26\1\0"+
    "\1\57\1\26\1\57\1\26\1\0\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\60\0\2\307\13\0"+
    "\3\310\10\0\3\4\22\0\1\4\2\0\26\4\2\311"+
    "\6\4\1\0\4\4\1\310\2\312\6\4\2\0\3\57"+
    "\22\0\1\57\2\0\26\57\2\313\6\57\1\0\4\57"+
    "\1\310\2\314\6\57\2\0\1\26\1\57\23\0\1\26"+
    "\2\0\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\313"+
    "\1\315\1\57\1\26\1\57\1\26\1\57\1\26\1\0"+
    "\1\57\1\26\1\57\1\26\1\310\1\314\1\316\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\2\0\3\4\22\0"+
    "\1\4\2\0\32\4\2\317\2\4\1\0\4\4\1\0"+
    "\10\4\2\0\3\57\22\0\1\57\2\0\32\57\2\320"+
    "\2\57\1\0\4\57\1\0\10\57\2\0\1\26\1\57"+
    "\23\0\1\26\2\0\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\320\1\321\1\57"+
    "\1\26\1\0\1\57\1\26\1\57\1\26\1\0\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\2\0"+
    "\3\4\22\0\1\4\2\0\4\4\2\322\30\4\1\0"+
    "\4\4\1\0\10\4\2\0\3\57\22\0\1\57\2\0"+
    "\4\57\2\323\30\57\1\0\4\57\1\0\10\57\2\0"+
    "\1\26\1\57\23\0\1\26\2\0\1\57\1\26\1\57"+
    "\1\26\1\323\1\324\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\0\1\57\1\26\1\57\1\26"+
    "\1\0\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\2\0\3\4\22\0\1\4\2\0\30\4\2\325"+
    "\4\4\1\0\4\4\1\0\10\4\2\0\3\57\22\0"+
    "\1\57\2\0\30\57\2\326\4\57\1\0\4\57\1\0"+
    "\10\57\2\0\1\26\1\57\23\0\1\26\2\0\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\57\1\26\1\57\1\26\1\326"+
    "\1\327\1\57\1\26\1\57\1\26\1\0\1\57\1\26"+
    "\1\57\1\26\1\0\1\57\1\26\1\57\1\26\1\57"+
    "\1\26\1\57\1\26\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9030];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\2\11\4\1\10\11\2\1\1\11"+
    "\30\1\1\0\1\1\4\11\2\0\22\1\1\0\36\1"+
    "\1\0\1\11\34\1\1\0\26\1\1\11\10\1\1\11"+
    "\14\1\1\0\22\1\2\11\17\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[215];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public String lexeme;
public int linea;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  AnalizadorLexico(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 224) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.SIMBOLO_DESCONOCIDO);
            }
          case 49: break;
          case 2: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.NUM_ENTERO);
            }
          case 50: break;
          case 3: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.IDENTIFICADOR);
            }
          case 51: break;
          case 4: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.OP_ARITMETICO_ADD);
            }
          case 52: break;
          case 5: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.OP_ARITMETICO_SUB);
            }
          case 53: break;
          case 6: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.OP_ARITMETICO_MUL);
            }
          case 54: break;
          case 7: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.OP_ARITMETICO_DIV);
            }
          case 55: break;
          case 8: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.SIMBOLO_ASIGNACION);
            }
          case 56: break;
          case 9: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.OP_RELACIONAL_MEQUE);
            }
          case 57: break;
          case 10: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.OP_RELACIONAL_MAQUE);
            }
          case 58: break;
          case 11: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.SIMBOLO_AGRUPACION_PABRE);
            }
          case 59: break;
          case 12: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.SIMBOLO_AGRUPACION_PACIERRA);
            }
          case 60: break;
          case 13: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.SIMBOLO_AGRUPACION_DOSP);
            }
          case 61: break;
          case 14: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.SIMBOLO_AGRUPACION_PCOMA);
            }
          case 62: break;
          case 15: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.SIMBOLO_AGRUPACION_CABRE);
            }
          case 63: break;
          case 16: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.SIMBOLO_AGRUPACION_CCIERRA);
            }
          case 64: break;
          case 17: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.COMA);
            }
          case 65: break;
          case 18: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.FIN_LINEA);
            }
          case 66: break;
          case 19: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.CADENA_DESCONOCIDA);
            }
          case 67: break;
          case 20: 
            { /*Ignore*/
            }
          case 68: break;
          case 21: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.PALABRA_RESERVADA_S);
            }
          case 69: break;
          case 22: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.OP_RELACIONAL_IIGUAL);
            }
          case 70: break;
          case 23: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.OP_RELACIONAL_MEIGUAL);
            }
          case 71: break;
          case 24: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.OP_RELACIONAL_MAIGUAL);
            }
          case 72: break;
          case 25: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.OP_RELACIONAL_DIFERENTE);
            }
          case 73: break;
          case 26: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.PALABRA_RESERVADA_SN);
            }
          case 74: break;
          case 27: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.NUM_FLOTANTE);
            }
          case 75: break;
          case 28: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.PALABRA_RESERVADA_APG);
            }
          case 76: break;
          case 29: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.PALABRA_RESERVADA_COM);
            }
          case 77: break;
          case 30: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.PALABRA_RESERVADA_CJT);
            }
          case 78: break;
          case 31: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.PALABRA_RESERVADA_CLX);
            }
          case 79: break;
          case 32: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.PALABRA_RESERVADA_BOO);
            }
          case 80: break;
          case 33: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.PALABRA_RESERVADA_LUZ);
            }
          case 81: break;
          case 34: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.PALABRA_RESERVADA_DET);
            }
          case 82: break;
          case 35: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.PALABRA_RESERVADA_ECD);
            }
          case 83: break;
          case 36: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.PALABRA_RESERVADA_ENT);
            }
          case 84: break;
          case 37: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.PALABRA_RESERVADA_FLO);
            }
          case 85: break;
          case 38: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.PALABRA_RESERVADA_FLS);
            }
          case 86: break;
          case 39: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.PALABRA_RESERVADA_SPD);
            }
          case 87: break;
          case 40: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.PALABRA_RESERVADA_VDD);
            }
          case 88: break;
          case 41: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.PALABRA_RESERVADA_ACTM);
            }
          case 89: break;
          case 42: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.PALABRA_RESERVADA_EFEC);
            }
          case 90: break;
          case 43: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.PALABRA_RESERVADA_FUNC);
            }
          case 91: break;
          case 44: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.PALABRA_RESERVADA_MOVAT);
            }
          case 92: break;
          case 45: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.PALABRA_RESERVADA_MOVAD);
            }
          case 93: break;
          case 46: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.PALABRA_RESERVADA_GIRAD);
            }
          case 94: break;
          case 47: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.PALABRA_RESERVADA_GIRAI);
            }
          case 95: break;
          case 48: 
            { lexeme = yytext();
    linea = yyline;
    return new Symbol(sym.PALABRA_RESERVADA_DETENTE);
            }
          case 96: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
